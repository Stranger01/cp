//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends

class Solution
{
    public:
    //Function to find whether a path exists from the source to destination.
    bool is_Possible(vector<vector<int>>& grid) 
    {
        int cols=grid[0].size(),x,y;
        int rows=grid.size();
        vector<vector<int>>visited;
        for(int i=0;i<rows;i++)
        {
            vector<int> vec;
            for(int j=0;j<cols;j++)
            {
                vec.push_back(0);
            }
            visited.push_back(vec);
        }
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                if(grid[i][j]==1)
                {
                    visited[i][j]=1;
                    x=i;
                    y=j;
                    break;
                }
            }
        }
        return dfs(grid,visited,x,y,rows,cols);
    }
    bool dfs(vector<vector<int>>& grid,vector<vector<int>>& visited,int x,int y, int rows, int cols)
    {
        bool ispath=false;
        if(grid[x][y]==2)
        return true;
        else
        {
            visited[x][y]=1;
            stack<pair<int,int>> moves;
            if(x-1>=0)
            moves.push(make_pair(x-1,y));
            if(y-1>=0)
            moves.push(make_pair(x,y-1));
            if(x+1<rows)
            moves.push(make_pair(x+1,y));
            if(y+1<cols)
            moves.push(make_pair(x,y+1));
            while(!moves.empty()&&!ispath)
            {
                pair<int,int>p1;
                p1=moves.top();
                moves.pop();
                if(visited[p1.first][p1.second]==0&&grid[p1.first][p1.second]!=0)
                {
                    ispath=dfs(grid,visited,p1.first,p1.second,rows,cols);
                }
            }
        }
        return ispath;
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<vector<int>>grid(n, vector<int>(n, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		bool ans = obj.is_Possible(grid);
		cout << ((ans) ? "1\n" : "0\n");
	}
	return 0;
}
// } Driver Code Ends
