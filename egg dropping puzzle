//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
    public:
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    int eggDrop(int n, int k) 
    {
        int dp[n][k+1];
            for(int i=0;i<n;i++)
            {
                for(int j=0;j<=k;j++)
                {
                    if(i==0)
                    dp[i][j]=j;
                    else if(j==0)
                    dp[i][j]=0;
                    else if(j==1)
                    dp[i][j]=1;
                    else
                    {
                        for(int z=1;z<=j;z++)
                        {
                            if(z==1)
                            dp[i][j]=max(dp[i-1][z-1],dp[i][j-z]);
                            else
                            dp[i][j]=min(dp[i][j],max(dp[i-1][z-1],dp[i][j-z]));
                        }
                        dp[i][j]+=1;
                    }
                }
            }
        return dp[n-1][k];
    }
};

//{ Driver Code Starts.
int main()
{
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //taking eggs and floors count
        int n, k;
        cin>>n>>k;
        Solution ob;
        //calling function eggDrop()
        cout<<ob.eggDrop(n, k)<<endl;
    }
    return 0;
}

// } Driver Code Ends
