//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
double MedianOfArrays(vector<int>& array1, vector<int>& array2);


// } Driver Code Ends
//User function Template for C++

class Solution{
    public:
    double MedianOfArrays(vector<int>& array1, vector<int>& array2)
    {
        int n=array1.size(),m=array2.size();
        if(m<n)
        {
            vector<int> temp;
            temp=array1;
            array1=array2;
            array2=temp;
        }
        n=array1.size();
        m=array2.size();
        int l=0,h=n;
        if(n==0)
        {
            if(m%2==0)
            return (double) (array2[m/2]+array2[m/2-1])/2;
            else
            return (double) (array2[m/2]);
        }
        else if(n==1)
        {
            if(m==1)
            return (double) (array1[0]+array2[0])/2;
            else if(m%2==1)
            {
                int mid=m/2;
                if(array1[0]>array2[mid+1])
                return (double) (array2[mid]+array2[mid+1])/2;
                else if(array1[0]<array2[mid-1])
                return (double) (array2[mid-1]+array2[mid])/2;
                else
                return (double) (array2[mid]+array1[0])/2;
            }
            else
            {
                int mid=m/2-1;
                if(array1[0]<array2[mid])
                return (double) (array2[mid]);
                else if(array1[0]>array2[mid+1])
                return (double) (array2[mid+1]);
                else
                return (double) (array1[0]);
            }
        }
        else if(n==2)
        {
            if(m==2)
            {
                if(array1[1]<array2[0]||array1[1]<array2[1])
                return (double) (array1[1]+array2[0])/2;
                else if(array1[0]>array2[1]||array1[1]>array2[1])
                return (double) (array2[1]+array1[0])/2;
                else if(array1[0]<array2[0]&&array2[1]<array1[1])
                return (double) (array2[0]+array2[1])/2;
                else if(array2[0]<array1[0]&&array1[1]<array2[1])
                return (double) (array1[0]+array1[1])/2;
            }
            else if(m%2==1)
            {
                int mid=m/2;
                if(array2[mid-1]>array1[1])
                return (double) (array2[mid-1]);
                else if(array2[mid+1]<array1[0])
                return (double) (array2[mid+1]);
                else if(array2[mid]<array1[0])
                return (double) (array1[0]);
                else if(array2[mid]>array1[1])
                return (double) (array1[1]);
                else
                return (double) (array2[mid]);
            }
            else
            {
                int mid=m/2-1;
                if(array2[mid]<array1[0]&&array2[mid+1]>array1[1])
                return (double) (array1[0]+array1[1])/2;
                else if(array1[1]>array2[mid+1]&&array1[0]>array2[mid]&&array1[0]<array2[mid+1])
                return (double) (array1[0]+array2[mid+1])/2;
                else if(array1[1]>array2[mid]&&array1[1]<array2[mid+1]&&array1[0]<array2[mid])
                return (double) (array2[mid]+array1[1])/2;
                else if(array1[1]<array2[mid-1])
                return (double) (array2[mid-1]+array2[mid])/2;
                else if(array1[0]>array2[mid+1])
                return (double) (array2[mid+1]+array2[mid+2])/2;
                else
                return (double) (array2[mid]+array2[mid+1])/2;
            }
        }
        while(l<=h)
        {
            int i1=(l+h)/2;
            int i2=(n+m+1)/2-i1;
            int max1=(i1==n)?INT_MAX:array1[i1];
            int min1=(i1==0)?-INT_MAX:array1[i1-1];
            int max2=(i2==m)?INT_MAX:array2[i2];
            int min2=(i2==0)?-INT_MAX:array2[i2-1];
            if(min1<=max2&&min2<=max1)
            {
                if((n+m)%2==0)
                return (double) (max(min1,min2)+min(max1,max2))/2;
                else
                return (double) (max(min1,min2));
            }
            else if(max2<min1) h=i1-1;
            else l=i1+1;
        }
    }
};

//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int m,n;
        cin>>m;
        vector<int> array1(m);
        for (int i = 0; i < m; ++i){
            cin>>array1[i];
        }
        cin>>n;
        vector<int> array2(n);
        for (int i = 0; i < n; ++i){
            cin>>array2[i];
        }
        Solution ob;
        cout<<ob.MedianOfArrays(array1, array2)<<endl;
    }
    return 0; 
}



// } Driver Code Ends
