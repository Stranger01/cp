//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        int cols=grid[0].size(),rows=grid.size(),ans=0;
        vector<vector<int>>visited;
        for(int i=0;i<rows;i++)
        {
            vector<int> vec;
            for(int j=0;j<cols;j++)
            {
                vec.push_back(0);
            }
            visited.push_back(vec);
        }
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                if(grid[i][j]=='1'&&visited[i][j]==0)
                {
                    ans++;
                    dfs(grid, visited, i, j, rows, cols);
                }
                else
                visited[i][j]=1;
            }
        }
        return ans;
    }
    void dfs(vector<vector<char>>& grid,vector<vector<int>>& visited,int x,int y, int rows, int cols)
    {
        visited[x][y]=1;
        stack<pair<int,int>> moves;
        if(x-1>=0)
        moves.push(make_pair(x-1,y));
        if(y-1>=0)
        moves.push(make_pair(x,y-1));
        if(x+1<rows)
        moves.push(make_pair(x+1,y));
        if(y+1<cols)
        moves.push(make_pair(x,y+1));
        if(x-1>=0&&y-1>=0)
        moves.push(make_pair(x-1,y-1));
        if(x-1>=0&&y+1<cols)
        moves.push(make_pair(x-1,y+1));
        if(y-1>=0&&x+1<rows)
        moves.push(make_pair(x+1,y-1));
        if(y+1<cols&&x+1<rows)
        moves.push(make_pair(x+1,y+1));
        while(!moves.empty())
        {
            pair<int,int>p1;
            p1=moves.top();
            moves.pop();
            if(visited[p1.first][p1.second]==0&&grid[p1.first][p1.second]=='1')
            {
                dfs(grid,visited,p1.first,p1.second,rows,cols);
            }
        }
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
// } Driver Code Ends
