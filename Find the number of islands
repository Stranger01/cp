//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        int cols=grid[0].size(),rows=grid.size(),ans=0;
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                if(grid[i][j]=='1')
                {
                    int x=i,y=j;
                    bool inc=true;
                    stack<pair<int,int>> moves;
                    if(x-1>=0)
                    moves.push(make_pair(x-1,y));
                    if(y-1>=0)
                    moves.push(make_pair(x,y-1));
                    if(x-1>=0&&y-1>=0)
                    moves.push(make_pair(x-1,y-1));
                    if(y+1<cols&&x-1>=0)
                    moves.push(make_pair(x-1,y+1));
                    while(!moves.empty())
                    {
                        pair<int,int>p1;
                        p1=moves.top();
                        moves.pop();
                        if(grid[p1.first][p1.second]=='0')
                        {
                            inc&=true;
                        }
                        else
                        inc=false;
                    }
                    if(inc)
                    ans++;
                }
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
// } Driver Code Ends
