// { Driver Code Starts
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
using namespace std;

 // } Driver Code Ends
//User function template for C++
class Solution{
public:	
	vector<int> constructLowerArray(int *arr, int n) {
	    int index[n],count[n]={0};
	    for(int i=0;i<n;i++)
	    index[i]=i;
	    mergesort(arr,0,n-1,index,count);
	    vector<int> ans;
	    for(int i=0;i<n;i++){
	    ans.push_back(count[i]);
	    }
	    return ans;
	}
    void mergesort(int *A,int first,int last,int *index,int *count)
    {
    	if(first==last)
    	{
    		return;
    	}
    	else
        {
    		int mid=(first+last)/2,B[last-first+1];
    		mergesort(A,first,mid,index,count);
    		mergesort(A,mid+1,last,index,count);
    		int i=first,j=mid+1,k=0,cnt=0;
    		while(i<=mid&&j<=last)
    		{
    			if(A[index[i]]<=A[index[j]])
    			{
    			  B[k]=index[i];
    			  count[index[i]]+=cnt;
    			  i++;
    			}
    			else if(A[index[j]]<A[index[i]])
    			{
    			  B[k]=index[j];
    			  cnt++;
    			  j++;
    			}
    			k++;
    		}
    		while(i<=mid)
    		{
    			B[k]=index[i];
    			count[index[i]]+=cnt;
    			k++;
    			i++;
    		}
    		while(j<=last)
    		{
    			B[k]=index[j];
    			k++;
    			j++;
    		}
    		k=0;
    		for(;k<=last-first;k++)//copy B back to A into the corresponding indices
    		{
    			index[first+k]=B[k];
    		}
        }	
    }
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.constructLowerArray(arr, n);
        for (auto x : ans) {
            cout << x << " ";
        }
        cout << "\n";
    }
    return 0;
}
  // } Driver Code Ends
